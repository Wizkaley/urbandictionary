name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REPO: ${{ github.repository }}
  BUILD_BRANCH: ${{ github.ref }}
  # BRANCH_NAME: echo $GITHUB_HEAD_REF
  BUILD_COMMIT: ${{ github.sha }}
#   PROVIDER_HREF: $GITHUB_SERVER_URL
  BUILD_RUNID: ${{ github.run_id }}
  CI_ENDPOINT_HOSTNAME: $GITHUB_SERVER_URL
  PULL_REQUEST_NUMBER: ${{ github.event.number }}
#   EVENT_NAME: 
  
  
  
  

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set current date as env variable
      id: startedAt
      run: echo "::set-output name=startedAt::$(date --utc +%FT%T.%3NZ)"
  
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Build
      run: go build -v ./...

    - name: Post Build to DI
      run: |
       # cd buildScript
       #./postBuildsToDI 
       echo $REPO
       echo $GITHUB_HEAD_REF
       echo $BUILD_COMMIT
       echo $GITHUB_SERVER_URL 
       echo $BUILD_RUNID
       echo $PULL_REQUEST_NUMBER
       echo $GITHUB_EVENT_NAME
    - name: The job has succeeded
      if: ${{ success() }}
      run: |
       # built_at='2020-01-20T17:42:40Z'
       status=Passed
       echo $status
       startedTime=${{ steps.startedAt.outputs.startedAt }}
       echo started :: $startedTime
       endTime=$(date --utc +%FT%T.%3NZ)
       echo end :: $endTime
       ELAPSED=$((endTime-startedTime))
       #echo $ELAPSED
       printf "%s.%s seconds passed\n" "${ELAPSED:0: -9}" "${ELAPSED: -9:3}"
       echo $(($ELAPSED/60))m $(($ELAPSED%60))s
    - name: The Jobs have failed
      if: ${{ failure() }}
      run: |
       # built_at='2020-01-20T17:42:40Z'
       echo $(date --utc +%FT%T.%3NZ)
       status=Failed
       echo $status
      
      
